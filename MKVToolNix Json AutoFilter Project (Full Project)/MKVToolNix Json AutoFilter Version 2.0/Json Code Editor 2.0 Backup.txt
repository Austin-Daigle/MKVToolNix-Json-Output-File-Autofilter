import java.util.ArrayList;
import java.util.TreeMap;
import java.util.Map.Entry;

/**
 * @author Austin
 * 
 *<h2>jsonFilter.class</h2>
 *
 * This constructor class filters and removes all of the defined conflicts and resource directory
 * paths in the user-provided .json code. The user-provided .json code is actually data from a 
 * file that is automatically generated as "options.json" by the program <b>MKVToolnix GUI</b>, this 
 * file is automatically generated to store media resource attributes/metadata and location
 * directories. 
 * 
 * In order to automatically batch-edit media files using batch scripts with <b>MKVToolnix GUI</b> all 
 * directory data relating to the location of resources (media location on a drive) must be identified
 * and removed, and any conflicting .json code attributes such as "--output," must also be removed in 
 * order to ensure a successful automation operation. 
 *  
*/

public class jsonFilter
{
	/*
	 * This area is reserved for the initialization and declaration of all of the 
	 * variables and objects that will be used in the following methods. 
	 */
	
	//this is a string variable to store the user-provided string of the .json code input.
	private String jsonInput = "";
	
	//This is a string variable to store the output of the filtered json code.
	private String jsonOutput = "";
	
	//this 1D array provides a list of supported file extensions for the filter() method. 
	private String[] allSupportedFileExtensions = 
	{
		//All Supported Video Formats
		".mkv",".webm",".mp4",".m4p",".3gp",".3g2",
		".m4b",".flv",".mpg",".mp2",".mpeg",".mpv",
		".m2v",".vob",".ogv",".ogg",".rm",".rmvb",
		".ogx",".avi",
		//All Supported Audio Formats
		".mp3",".mp2",".aac",".flac",".ac3",".dts",
		".dtshd",".ogm",".spx",".opus",
		".spx",".opus",
		//All Supported Subtitles 
		".srt",".pgs",".sup",".idx",".sub",".ass",
		".ssa",
		//All Supported Picture Formats
		".jpeg",".png",".gif",".bmp"
		};
	
	//This 1D array provides a list of supported Linux directory root paths for the filter() method.
	private String[] allSupportedLinuxDirectoryPaths = 
	{
		//Supported Linux Root Paths 	
		"/bin/","/boot/","/dev/","/etc/","/home/","/lib/","/media/",
		"/mnt/","/opt/","/sbin/","/srv/","/tmp/","/usr/","/var/",
		"/root/","/proc/",
	};
	
	//This 1D array provides a list of supported windows drive letter directory roots for the filter() method.
	private String[] windowsDirectoryLetters = 
	{
		//Supported Windows Drive Path Letters
		"A:/", "B:/", "C:/", "D:/", "E:/", "F:/",
		"G:/", "H:/", "I:/", "J:/", "K:/", "L:/",
		"M:/", "N:/", "O:/", "P:/", "Q:/", "R:/",
		"S:/", "T:/", "U:/", "V:/", "W:/", "X:/",
		"Y:/", "Z:/",	
	};
	
	//This is a database that stores the indexes and string info of all root path and file extensions in order.
	private TreeMap<Integer, String> rootPathsAndFileExtensions = new TreeMap<Integer, String>(); 
	//This is a database that stores the indexes and string info of all root paths in order.
	private TreeMap<Integer, String> rootPathDatabase = new TreeMap<Integer, String>(); 
	//This is a database that stores the indexes and string info of all file extensions in order
	private TreeMap<Integer, String> fileExtensionDatabase = new TreeMap<Integer, String>(); 
	//This is a database that stores the indexes and string info of all file extension/root path indices and the condition of being a root path or file extension
	private TreeMap<Integer, String> entryTypeDatabase = new TreeMap<Integer, String>(); 	
	//This boolean variable is used to indicate an error in the .json input
	private boolean isErrorPresent = false;
	//This ArrayList has all of the values from the Values of entryTypeDatabase to be processed to identify input errors.
	private ArrayList<String> entryTypeErrorCheck = new ArrayList<String>();
	//This ArrayList has all of the filtered strings that will be removed from jsonInput
	private ArrayList<String> flaggedJsonStrings = new ArrayList<String>();
	//This ArrayList has all of the predefined json strings that will be removed
	//The removed strings can appear multiple times or a single instance but they do not need a screening process. 
	private ArrayList<String> jsonCodeBlackList = new ArrayList<String>();
	
	
	//Default constructor method
	public jsonFilter()
	{
		//Clear all variables/objects
		jsonInput = "";
		jsonOutput = "";
		rootPathsAndFileExtensions.clear();
		rootPathDatabase.clear();
		fileExtensionDatabase.clear();
		entryTypeDatabase.clear();
		isErrorPresent = false;
		entryTypeErrorCheck.clear();
		flaggedJsonStrings.clear();
		jsonCodeBlackList.clear();
		//add basic json filters to jsonCodeFilter
		jsonCodeBlackList.add("\"(\",\")\",");
		jsonCodeBlackList.add("\"--output\",");
	}
	
	//setter for jsonInput
	public void setJsonInput(String jsonInput)
	{
		this.jsonInput = jsonInput;
	}
	
	//getter for jsonInput
	public String getJsonInput()
	{
		return jsonInput;	
	}
		
	//getter for jsonOutput 
	public String getJsonOutput()
	{
		return jsonOutput;
	}
	
	
	
	
	
	/**
	 * This method is the primary function that filters all of the json code data.
	 */
	public void filter()
	{
		System.out.println("=======================================================================");
		System.out.println(jsonInput);
		System.out.println("=======================================================================");
		jsonInput = jsonInput.replaceAll(" ","");
		System.out.println("=======================================================================");
		System.out.println(jsonInput);
		System.out.println("=======================================================================");
		//Execute primary filter method
		System.out.println("		>>>> SEARCHING FOR ALL MICROSOFT WINDOWS(TM) DRIVE LETTERS <<<<");
    	//Scan For all Microsoft Windows(TM) Drive Letters (A:\ though Z:\)
    	for(int i = 0; i < windowsDirectoryLetters.length;i++)
    	{
    		System.out.println("[Process] Searching for all instances of "+windowsDirectoryLetters[i]);
    		stringFinder(jsonInput,windowsDirectoryLetters[i],true);
    	}
    	
    	System.out.println("		>>>> SEARCHING FOR ALL SUPPORTED LINUX DIRECTORY PATHS <<<<");
    	//Scan for all Linux root paths
    	for(int i = 0; i < allSupportedLinuxDirectoryPaths.length;i++)
    	{
    		System.out.println("[Process] Searching for all instances of \""+allSupportedLinuxDirectoryPaths[i]);
    		stringFinder(jsonInput,allSupportedLinuxDirectoryPaths[i],true);
    	}
    	
    	System.out.println("		>>>> SEARCHING FOR ALL SUPPORTED FILE EXTENSIONS <<<<");
    	//Scan for all Supported File extensions
    	for(int i = 0; i <  allSupportedFileExtensions.length;i++)
    	{
    		System.out.println("[Process] Searching for all instances of "+ allSupportedFileExtensions[i]);
    		stringFinder(jsonInput, allSupportedFileExtensions[i],false);
    	}	
		
    	System.out.println("--------------------------------------------------------------------------------------------------------------------------------------------");
    	System.out.println("rootPathDatabase: "+rootPathDatabase);
    	System.out.println("fileExtensionDatabase: "+fileExtensionDatabase);
    	System.out.println("--------------------------------------------------------------------------------------------------------------------------------------------");
    	System.out.println("rootPathsAndFileExtensions: "+ rootPathsAndFileExtensions);
    	System.out.println("--------------------------------------------------------------------------------------------------------------------------------------------");
    	System.out.println("entryTypeDatabase: "+entryTypeDatabase);
    	System.out.println("--------------------------------------------------------------------------------------------------------------------------------------------");
    	
    	//this method checks for discrepancies
    	inputErrorCheck();
    	if(!isErrorPresent)
    	{
    		findStringsToRemove();
    		//set the value of the jsonOutput to the value of jsonInput
    		jsonOutput = jsonInput;
  
    		System.out.println("[Alart] The following Strings have been marked for deletion:");
    		System.out.println("------------------------------------------------------------");
    		//This for loop delete all of the detected directory paths marked for deletion
    		for(int i = 0; i < flaggedJsonStrings.size(); i++)
    		{
    			System.out.println(flaggedJsonStrings.get(i));
    			deleteAllInstancesOfString(flaggedJsonStrings.get(i));
    			//jsonOutput = jsonOutput.replace(flaggedJsonStrings.get(i), "");
    		}
    		System.out.println("------------------------------------------------------------");

    		
    		for(int i = 0; i < jsonCodeBlackList.size(); i++)
    		{
    			deleteAllInstancesOfString(jsonCodeBlackList.get(i));
    		}
    		autoFormat(jsonOutput);
    		System.out.println(jsonOutput);
    	}
	}
	
	
	private void deleteAllInstancesOfString(String markedToDelete)
	{
		jsonOutput = jsonOutput.replace(markedToDelete, "");
	}

	private void autoFormat(String jsonOutput)
	{
		this.jsonOutput = jsonOutput.replace(",",",\n");
		this.jsonOutput = jsonOutput.replace(",",",\n");
		
		if(jsonOutput.charAt(0)=='[')
		{
			jsonOutput = jsonOutput.substring(0,1)+"\n"
	    			+jsonOutput.substring(1);
		}
		
		if(jsonOutput.charAt(jsonOutput.length()-1)==']')
		{
			
		}
	}
	
	
	
	
	/**
	 * This method takes all of of the indexes of rootPathsAndFileExtensionsIndices to add to list of string to remove.
	 * Basically this method removes directories
	 */
	private void findStringsToRemove()
	{
		//create a local ArrayList to store all of the indices of directory root paths and file extensions
		ArrayList<Integer> rootPathsAndFileExtensionsIndices = new ArrayList<Integer>();
		
    	for(Entry<Integer, String> i : entryTypeDatabase.entrySet())
    	{
    		rootPathsAndFileExtensionsIndices.add(i.getKey());
    	}

		for(int i = 0; i < rootPathsAndFileExtensionsIndices.size(); i=i+2)
		{
			flaggedJsonStrings.add(jsonInput.substring(rootPathsAndFileExtensionsIndices.get(i),rootPathsAndFileExtensionsIndices.get(i+1)));	
		}	
	}
	
	
	private void stringFinder(String searchFrom, String searchFor,Boolean isRootPath)
    {
        //This method printout all of the indices of the found string "searchFor" from the input string "searchFrom"
        //searchFrom: the string to search for 
        //searchFor: the string to search from
		//IsRootPath: if the searched word is a rootpath then input that into the function
    	//Create a variable to save the last index of the string searchFor from searchFrom.
		int lastIndexOfString = 0;
		/*while the value of lastIndexOfString is not -1 (meaning that there is at least one 
		 * more searchFor string inside of searchFrom). 
		 * A value of -1 from the method indexOf() indicated that the string instance does not occur. 
		 */
		while(!(lastIndexOfString == -1))
		{
			//find the index of searchFor from searchFrom and return the value of the closest instance of that string. 
			lastIndexOfString = searchFrom.indexOf(searchFor,lastIndexOfString);
			//If the current value of LastIndexOfString is not equal to -1 then...
		    if(!(lastIndexOfString == -1))
		    {
		    	//Add the length of searchFor.length to the current value of lastIndexOfString
		    	lastIndexOfString = lastIndexOfString + searchFor.length();
		    	//Printout result (realistically add a database entry here...)
		    	System.out.println("    --> Entry Found at index: "+lastIndexOfString);
		    	
		    	//Add entry into directoryPathsAndFileExtensions, the index value is the value of the found string and the string is the string to search for.
		    	rootPathsAndFileExtensions.put(lastIndexOfString,searchFor);

		    	//If rootPaths are being searched for.
		    	if(isRootPath)
		    	{
		    		//a offset of searchFor.length() has been added to the rootPath data to include the length of the root path
		    		//an additional offset has been added to account for the quotation mark before the statement.
		    		//If searchFinder is true then add entry into rootPathDatabase 
		    		rootPathDatabase.put(lastIndexOfString-(searchFor.length()+1),searchFor);
		    		//Add a string value and an index value for the errorCheckDatabase for later analysis
		    		entryTypeDatabase.put(lastIndexOfString-(searchFor.length()+1),"rootPath: "+searchFor);
		    	}
		    	else
		    	{
		    		//an additional offset has been added to account for the quotation marks/commas for the end of a statement. 
		    		//If searchFinder is false then add entry into fileExtensionDatabase
		    		fileExtensionDatabase.put(lastIndexOfString+2,searchFor);
		    		//Add a string value and an index value for the errorCheckDatabase for later analysis
		    		entryTypeDatabase.put(lastIndexOfString+2,"fileExtension: "+searchFor);
		    	}
		    }
		}
    }
	
	private void inputErrorCheck()
	{
		//for every Value in entryTypeDatebase and add that to entryTypeErrorCheck
    	for(Entry<Integer, String> x : entryTypeDatabase.entrySet())
    	{
    		entryTypeErrorCheck.add(x.getValue());
    	}
    	
    	System.out.println("[Alart] Scanning for discrepancies...");

    	//if there is an odd amount of entries in entryTypeErrorCheck then add a "missing statement" placeholder for further analysis
		if(!(entryTypeErrorCheck.size()%2==0))
		{
			System.out.println("[Error!] Missing file extension/directory root path Detected. Processing placeholder has been added entry added...");
			entryTypeErrorCheck.add("Missing Statement");
		}
    	
		//Scan data from entryTypeErrorCheck and then save all errors to errorAnalysisLog
		for(int i = 0; i < entryTypeErrorCheck.size(); i=i+2)
		{
			if(entryTypeErrorCheck.get(i).contains("rootPath") && entryTypeErrorCheck.get(i+1).contains("fileExtension"))
			{
				isErrorPresent = false;
			}
			else if(entryTypeErrorCheck.get(i).contains("fileExtension") && entryTypeErrorCheck.get(i+1).contains("fileExtension"))
			{
				isErrorPresent = true;
			}
			else if(entryTypeErrorCheck.get(i).contains("rootPath") && entryTypeErrorCheck.get(i+1).contains("rootPath"))
			{
				isErrorPresent = true;
			}
			else if(entryTypeErrorCheck.get(i).contains("fileExtension") && entryTypeErrorCheck.get(i+1).contains("rootPath"))
			{
				isErrorPresent = true;
			}
			else if(entryTypeErrorCheck.get(i).contains("rootPath") && entryTypeErrorCheck.get(i+1).contains("Missing Statement"))
			{
				isErrorPresent = true;
			}
			else if(entryTypeErrorCheck.get(i).contains("Missing Statement") && entryTypeErrorCheck.get(i+1).contains("rootPath"))
			{
				isErrorPresent = true;
			}
		}
		
		//Printout if an error statement has been detected...
    	if(isErrorPresent)
    	{
    		System.out.println("[Alart] missing/mismatch/unrecognized statements found!");
    	}
    	else
    	{
    		System.out.println("[Success] No discrepancies found.");    		
    	}

	}
	
}
